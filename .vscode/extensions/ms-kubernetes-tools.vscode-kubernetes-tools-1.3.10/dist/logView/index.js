!function(n){var g={};function t(I){if(g[I])return g[I].exports;var e=g[I]={i:I,l:!1,exports:{}};return n[I].call(e.exports,e,e.exports,t),e.l=!0,e.exports}t.m=n,t.c=g,t.d=function(n,g,I){t.o(n,g)||Object.defineProperty(n,g,{enumerable:!0,get:I})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,g){if(1&g&&(n=t(n)),8&g)return n;if(4&g&&"object"==typeof n&&n&&n.__esModule)return n;var I=Object.create(null);if(t.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:n}),2&g&&"string"!=typeof n)for(var e in n)t.d(I,e,function(g){return n[g]}.bind(null,e));return I},t.n=function(n){var g=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(g,"a",g),g},t.o=function(n,g){return Object.prototype.hasOwnProperty.call(n,g)},t.p="",t(t.s=0)}([function(module,exports){eval("const vscode = acquireVsCodeApi();\n\nconst CHRONO_UNITS = [\n    { symbol: 'h', seconds: 3600 },\n    { symbol: 'm', seconds: 60 },\n    { symbol: 's', seconds: 1 }\n];\n\nlet fullPageContent = {};\nlet filteredContent = {};\nlet fpcCounter = -1;\nlet filterMatched = false;\nlet schemaColors;\nlet defaultContainer;\nlet isToBottom = false;\nlet isFollowRun = false;\nlet lastScrollTop = 0;\nlet typingTimer;\n\nwindow.addEventListener('message', (event) => {\n    const message = event.data;\n    switch (message.command) {\n        case 'init': {\n            const { containers, colors } = message;\n            schemaColors = JSON.parse(colors);\n            if (containers.length === 1) {\n                defaultContainer = containers[0];\n                return;\n            }\n\n            const containersPanel = document.getElementById('containers-panel');\n            containersPanel.classList.remove('display-none');\n            containersPanel.classList.add('display-inline-block');\n\n            const select = createElement('vscode-select');\n            select.setAttribute('id', 'containers-select');\n            // eslint-disable-next-line @typescript-eslint/prefer-for-of\n            for (let i = 0; i < containers.length; i += 1) {\n                const option = createElement('vscode-option', containers[i], containers[i]);\n                if (i === 0) {\n                    option.setAttribute('selected', '');\n                }\n                select.appendChild(option);\n            }\n            containersPanel.appendChild(select);\n        }\n        case 'content': {\n            const text = message.text.replace(/\\n$/, '');\n            if (!text) {\n                return;\n            }\n            const newContent = text.split('\\n');\n            updateContent(newContent);\n            break;\n        }\n        case 'reset': {\n            const { follow, timestamp, since, tail, destination, wrap } = message;\n            setSettings({\n                follow,\n                timestamp,\n                since,\n                tail,\n                destination,\n                wrap\n            });\n            break;\n        }\n        case 'run': {\n            onRun();\n            break;\n        }\n    }\n});\n\nfunction setSettings(settings) {\n    const { follow, timestamp, since, tail, destination, wrap } = settings;\n\n    if (follow !== undefined) {\n        document.getElementById('follow-chk').checked = follow;\n    }\n\n    if (timestamp !== undefined) {\n        document.getElementById('timestamp-chk').checked = timestamp;\n    }\n\n    if (since !== undefined) {\n        const split = splitSinceDuration(since);\n        document.getElementById('since-input').value = split.number;\n        document.getElementById('since-select').value = split.unit;\n    }\n\n    if (tail !== undefined) {\n        document.getElementById('tail-input').value = tail;\n    }\n\n    if (destination !== undefined) {\n        document.getElementById('destination-select').value = destination;\n    }\n\n    if (wrap !== undefined) {\n        document.getElementById('wrap-chk').checked = wrap;\n    }\n}\n\nfunction debounce(func, wait, immediate) {\n    let timeout;\n    return function () {\n        const context = this, args = arguments;\n        const later = function () {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n\nfunction createElement(type, value, content) {\n    const element = document.createElement(type);\n    if (value) { element.value = value; }\n    if (content) { element.textContent = content; }\n    return element;\n}\n\nfunction onRun() {\n    changeVisibilityAfterRun();\n    startLog();\n}\n\nfunction init() {\n    const runBtn = document.getElementById('runBtn');\n    runBtn.addEventListener('click', onRun);\n\n    const stopBtn = document.getElementById('stopBtn');\n    stopBtn.addEventListener('click', (_event) => {\n        isFollowRun = false;\n        changeVisibilityAfterStop();\n        stopLog();\n    });\n\n    const clearBtn = document.getElementById('clearBtn');\n    clearBtn.addEventListener('click', (_event) => {\n        changeVisibilityAfterClear();\n        clear();\n    });\n\n    const resetBtn = document.getElementById('resetBtn');\n    resetBtn.addEventListener('click', (_event) => {\n        reset();\n    });\n\n    const saveSettingsBtn = document.getElementById('saveSettingsBtn');\n    saveSettingsBtn.addEventListener('click', (_event) => {\n        vscode.postMessage({\n            command: 'saveSettings',\n            follow: isFollow(),\n            timestamp: document.getElementById('timestamp-chk').checked,\n            since: getSinceDurationSeconds(),\n            tail: getTail(),\n            destination: getDestinationValue(),\n            wrap: isWrapEnabled()\n        });\n    });\n\n    const bottomBtn = document.getElementById('bottomBtn');\n    bottomBtn.addEventListener('click', (_event) => {\n        scrollToBottom();\n    });\n\n    const wrapChk = document.getElementById('wrap-chk');\n    wrapChk.addEventListener('vsc-change', (event) => {\n        if (event.detail.checked) {\n            switchClass('content', 'white-space-pre', 'white-space-wrap');\n        } else {\n            switchClass('content', 'white-space-wrap', 'white-space-pre');\n        }\n    });\n\n    const filterSelect = document.getElementById('filter-select');\n    filterSelect.addEventListener('vsc-change', (_event) => {\n        resetFilter();\n        if (isRun() && isFiltering()) {\n            runFilter();\n        }\n    });\n\n    const filterInput = document.getElementById('filter-input');\n    filterInput.addEventListener('keyup', (_event) => {\n        resetFilter();\n        if (!isRun()) {\n            return;\n        }\n        if (typingTimer) {\n            clearTimeout(typingTimer);\n        }\n        typingTimer = setTimeout(runFilter, 500);\n    });\n\n    const logPanel = document.getElementById('logPanel');\n    const toBottom = debounce(function () {\n        const st = logPanel.scrollTop;\n        if (st > lastScrollTop) {\n            // scroll down\n            isToBottom = (logPanel.scrollTop + window.innerHeight) >= logPanel.scrollHeight;\n        } else {\n            // scroll up\n            isToBottom = false;\n        }\n        lastScrollTop = st <= 0 ? 0 : st;\n        renderByPagination();\n    }, 250);\n    logPanel.addEventListener(\"scroll\", toBottom);\n\n    vscode.postMessage({\n        command: 'postInitialize'\n    });\n}\n\nfunction resetContent() {\n    fullPageContent = {};\n    fpcCounter = -1;\n}\n\nfunction resetFilter() {\n    filteredContent = {};\n    filterMatched = false;\n}\n\nfunction runFilter() {\n    emptyContent();\n    saveFilteredContent();\n    setHeightContentPanel();\n    renderByPagination();\n}\n\nfunction changeVisibilityAfterRun() {\n    if (getDestinationValue() === 'Terminal') {\n        return;\n    }\n    document.getElementById('runBtn').classList.add('display-none');\n    if (isFollow()) {\n        switchClass('stopBtn', 'display-none', 'display-inline-block');\n    }\n    switchClass('clearBtn', 'display-none', 'display-inline-block');\n}\n\nfunction changeVisibilityAfterClear() {\n    if (document.getElementById('stopBtn').classList.contains('display-none')) {\n        switchClass('clearBtn', 'display-inline-block', 'display-none');\n        switchClass('runBtn', 'display-none', 'display-inline-block');\n    }\n}\n\nfunction changeVisibilityAfterStop() {\n    switchClass('stopBtn', 'display-inline-block', 'display-none');\n}\n\nfunction switchClass(id, classToRemove, classToAdd) {\n    const element = document.getElementById(id);\n    if (element.classList.contains(classToRemove)) {\n        element.classList.remove(classToRemove);\n    }\n    if (!element.classList.contains(classToAdd)) {\n        element.classList.add(classToAdd);\n    }\n}\n\nfunction isRun() {\n    return document.getElementById('runBtn').classList.contains('display-none');\n}\n\nfunction isFiltering() {\n    const filterInput = document.getElementById('filter-input').value;\n    return filterInput.length > 0;\n}\n\nfunction startLog() {\n    resetContent();\n    resetFilter();\n    clear();\n    isFollowRun = isFollow();\n    const options = {\n        container: getContainer(),\n        follow: isFollowRun,\n        timestamp: document.getElementById('timestamp-chk').checked,\n        since: getSinceDurationString(),\n        tail: getTail(),\n        destination: getDestinationValue()\n    };\n    vscode.postMessage({\n        command: 'start',\n        options: JSON.stringify(options)\n    });\n}\n\nfunction stopLog() {\n    vscode.postMessage({\n        command: 'stop'\n    });\n}\n\nfunction clear() {\n    if (!isFollowRun) {\n        resetContent();\n        resetFilter();\n    }\n    setHeightContentPanel(true);\n    emptyContent();\n}\n\nfunction reset() {\n    const containersSelect = document.getElementById('containers-select');\n    if (containersSelect) {\n        containersSelect.selectedIndex = 0;\n    }\n\n    vscode.postMessage({\n        command: 'reset'\n    });\n}\n\nfunction updateContent(newContent) {\n    let content = {};\n    let counter = 0;\n\n    for (const element of newContent) {\n        if (element.length > 0) {\n            content[counter] = element;\n            fpcCounter++;\n            fullPageContent[fpcCounter] = element;\n            counter++;\n        }\n    }\n\n    content = saveFilteredContent(content);\n    setHeightContentPanel();\n    renderByPagination(content);\n    switchClass('clearBtn', 'display-none', 'display-inline-block');\n}\n\nfunction setHeightContentPanel(removeStyle) {\n    if (removeStyle) {\n        document.getElementById('innerLogPanel').style.removeProperty('height');\n    } else {\n        const content = isFiltering() ? filteredContent : fullPageContent;\n        const rows = Object.keys(content).length;\n        const heightDiv = getDefaultDivHeightValue();\n        document.getElementById('innerLogPanel').style.height = `${heightDiv * rows}px`;\n    }\n}\n\nfunction saveFilteredContent(content) {\n    let contentAfterFilter;\n    if (isFiltering()) {\n        contentAfterFilter = filter(content);\n        let fcRows = Object.keys(filteredContent).length - 1;\n        if (fcRows === -1) {\n            filteredContent = contentAfterFilter;\n            return contentAfterFilter;\n        }\n        for (let i = 0; i < Object.keys(contentAfterFilter).length; i += 1) {\n            fcRows++;\n            filteredContent[fcRows] = contentAfterFilter[i];\n        }\n    }\n    return contentAfterFilter;\n}\n\nfunction filter(logs) {\n    const text = logs ? logs : fullPageContent;\n    const filterInput = document.getElementById('filter-input').value;\n    const mode = document.getElementById('filter-select').value;\n    let content = {};\n    if (filterInput.length > 0) {\n        const regex = new RegExp(filterInput);\n        switch (mode) {\n            case 'include':\n                content = filterByFunction(text, (value) => regex.test(value));\n                break;\n            case 'exclude':\n                content = filterByFunction(text, (value) => !regex.test(value));\n                break;\n            case 'before':\n                if (!filterMatched) {\n                    const filterBeforeResult = filterBefore(text, regex);\n                    content = filterBeforeResult.content;\n                    filterMatched = filterBeforeResult.matched;\n                }\n                break;\n            case 'after':\n                if (!filterMatched) {\n                    const filterAfterResult = filterAfter(text, regex);\n                    content = filterAfterResult.content;\n                    filterMatched = filterAfterResult.matched;\n                } else {\n                    content = text;\n                }\n                break;\n            default:\n                break;\n        }\n    } else {\n        content = text;\n    }\n\n    return content;\n}\n\nfunction filterByFunction(text, func) {\n    const content = {};\n    let counter = 0;\n    let innerCounter = 0;\n    while (true) {\n        const value = text[counter];\n        if (!value) {\n            break;\n        }\n        if (func(value)) {\n            content[innerCounter] = value;\n            innerCounter++;\n        }\n        counter++;\n    }\n    return content;\n}\n\nfunction filterBefore(text, regex) {\n    const content = {};\n    let counter = 0;\n    let matched = false;\n    while (true) {\n        const value = text[counter];\n        matched = regex.test(value);\n        if (!value || matched) {\n            break;\n        }\n        content[counter] = value;\n        counter++;\n    }\n    return { matched, content };\n}\n\nfunction filterAfter(text, regex) {\n    const content = {};\n    let counter = 0;\n    let innerCounter = 0;\n    let start = false;\n    let matched = false;\n    while (true) {\n        const value = text[counter];\n        if (!value) {\n            break;\n        }\n        matched = regex.test(value);\n        if (!start && matched) {\n            start = true;\n        }\n        if (start) {\n            content[innerCounter] = value;\n            innerCounter++;\n        }\n        counter++;\n    }\n    return { matched, content };\n}\n\nfunction emptyContent() {\n    const contentDiv = document.getElementById('innerLogPanel');\n    let i = contentDiv.childNodes.length;\n    while (i--) {\n        contentDiv.removeChild(contentDiv.firstChild);\n    }\n    contentDiv.innerHTML = `<code id='content' class='${isWrapEnabled() ? 'white-space-wrap' : 'white-space-pre'} position-relative'></code>`;\n}\n\nfunction renderByPagination(contentToAdd) {\n    if (contentToAdd && Object.keys(contentToAdd).length === 0) {\n        return;\n    }\n    const fullFilteredContent = isFiltering() ? filteredContent : fullPageContent;\n    const totalRows = Object.keys(fullFilteredContent).length - 1;\n    const heightDiv = getDefaultDivHeightValue();\n    const currentPosition = document.getElementById('logPanel').scrollTop;\n    const referenceRow = Math.floor(currentPosition / heightDiv);\n    // identify rows range to draw\n    let lowerRange = referenceRow - 250 < 0 ? 0 : referenceRow - 250;\n    let upperRange = referenceRow + 250 > totalRows ? totalRows : referenceRow + 250;\n    let isPrepend = false;\n\n    const children = document.getElementById('content').children;\n    if (children.length !== 0) {\n        // identify rows range present in DOM\n        const lowestRowInDOM = parseInt(children.item(0).id);\n        const uppestRowInDOM = parseInt(children.item(children.length - 1).id);\n        if (lowerRange < lowestRowInDOM) {\n            if (upperRange >= lowestRowInDOM) {\n                removeChildren(upperRange + 1, uppestRowInDOM);\n                upperRange = lowestRowInDOM - 1;\n                isPrepend = true;\n                document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n            } else {\n                emptyContent();\n                document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n            }\n            const content = extractRowsToDraw(fullFilteredContent, lowerRange, upperRange);\n            render(beautifyLines(content), lowerRange, isPrepend);\n        } else if (upperRange > uppestRowInDOM) {\n            if (lowerRange <= uppestRowInDOM) {\n                removeChildren(lowestRowInDOM, lowerRange - 1);\n                document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n                lowerRange = uppestRowInDOM + 1;\n            } else {\n                emptyContent();\n                document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n            }\n            const content = extractRowsToDraw(fullFilteredContent, lowerRange, upperRange);\n            render(beautifyLines(content), lowerRange, isPrepend);\n        }\n    } else {\n        const content = extractRowsToDraw(fullFilteredContent, lowerRange, upperRange);\n        document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n        render(beautifyLines(content), lowerRange, isPrepend);\n    }\n}\n\nfunction extractRowsToDraw(content, from, to) {\n    const contentExtracted = {};\n    for (let i = from; i <= to; i += 1) {\n        contentExtracted[i] = content[i];\n    }\n    return contentExtracted;\n}\n\nfunction beautifyLines(contentLines) {\n    const content = {};\n    if (Object.keys(contentLines).length === 0) {\n        return content;\n    }\n\n    const heightDiv = getDefaultDivHeightValue();\n    // eslint-disable-next-line prefer-const\n    for (let [key, value] of Object.entries(contentLines)) {\n        if (!value) {\n            continue;\n        }\n        value = value.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        value = highlightWords(value);\n        value = /\\n$/.test(value) ? value : `${value}\\n`;\n        content[key] = `<div id=\"${key}\" style=\"min-height: ${heightDiv}px\">${value}</div>`;\n    }\n    return content;\n}\n\nfunction highlightWords(row) {\n    if (!schemaColors) {\n        return row;\n    }\n\n    for (const rule of schemaColors) {\n        const regexp = new RegExp(rule.regex, \"gi\");\n        if (regexp.test(row)) {\n            row = row.replaceAll(regexp, repl);\n            row = row.replaceAll('#ruleColor', rule.color);\n        }\n    }\n    return row;\n}\n\nfunction repl() {\n    const argsLength = arguments.length;\n    const match = arguments[0];\n    const originalString = arguments[argsLength - 1];\n\n    if (!originalString) {\n        return match;\n    }\n\n    const offset = arguments[argsLength - 2];\n\n    const substring = originalString.substring(0, offset + match.length);\n    const indexOpenSpan = substring.lastIndexOf(\"<span\");\n    const indexCloseSpan = substring.lastIndexOf(\"</span>\");\n    if (indexOpenSpan === -1 || indexOpenSpan < indexCloseSpan) {\n        return `<span class=\"#ruleColor\">${match}</span>`;\n    }\n\n    return match;\n}\n\nfunction removeChildren(from, to) {\n    if (to < from) {\n        return;\n    }\n    for (let i = from; i <= to; i++) {\n        const toDelete = document.getElementById(i.toString());\n        if (toDelete) {\n            toDelete.remove();\n        }\n    }\n}\n\nfunction render(content, from, prepend) {\n    const contentElement = document.getElementById('content');\n\n    if (Object.keys(content).length === 0) {\n        const fragment = document.createRange().createContextualFragment('No logs ...');\n        contentElement.appendChild(fragment);\n    } else {\n        const contentToDisplay = concatenateObjectValuesAsString(content, from);\n        const fragment = document.createRange().createContextualFragment(contentToDisplay);\n        if (prepend) {\n            contentElement.prepend(fragment);\n        } else {\n            contentElement.appendChild(fragment);\n        }\n        if (isToBottom) {\n            scrollToBottom();\n        }\n    }\n}\n\nfunction concatenateObjectValuesAsString(object, ix) {\n    let valuesConcatenated = '';\n    while (true) {\n        const value = object[ix];\n        if (!value) {\n            break;\n        }\n        valuesConcatenated += value;\n        ix++;\n    }\n    return valuesConcatenated;\n}\n\nfunction scrollToBottom() {\n    document.getElementById('bottom').scrollIntoView();\n}\n\nfunction getContainer() {\n    const containersSelect = document.getElementById('containers-select');\n    return (containersSelect) ? containersSelect.value : defaultContainer;\n}\n\nfunction isFollow() {\n    return document.getElementById('follow-chk').checked;\n}\n\nfunction getSinceDurationString() {\n    const sinceInput = document.getElementById('since-input').value;\n\n    if (sinceInput <= 0) {\n        return 0;\n    }\n\n    const sinceType = document.getElementById('since-select').value;\n    return `${sinceInput}${sinceType}`;\n}\n\nfunction getSinceDurationSeconds() {\n    const sinceInput = document.getElementById('since-input').value;\n    const since = Number.parseInt(sinceInput, 10);\n\n    if (since <= 0) {\n        return -1;\n    }\n\n    const sinceType = document.getElementById('since-select').value;\n    const unit = CHRONO_UNITS.find((chronoUnit) => sinceType === chronoUnit.symbol);\n\n    return since * unit.seconds;\n}\n\nfunction splitSinceDuration(since) {\n    const effectiveSince = Math.floor(since);\n\n    for (const chronoUnit of CHRONO_UNITS) {\n        const { seconds, symbol } = chronoUnit;\n\n        if (effectiveSince % seconds === 0) {\n            return {\n                unit: symbol,\n                number: effectiveSince / seconds\n            };\n        }\n    }\n}\n\nfunction getTail() {\n    const inputValue = document.getElementById('tail-input').value;\n    const tail = Number.parseInt(inputValue, 10);\n    return (tail > 0) ? tail : -1;\n}\n\nfunction getDestinationValue() {\n    return document.getElementById('destination-select').value;\n}\n\nfunction isWrapEnabled() {\n    return document.getElementById('wrap-chk').checked;\n}\n\nfunction getDefaultDivHeightValue() {\n    return document.getElementById('follow-lbl').offsetHeight;\n}\n\n(function () {\n    init();\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);